// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
  id 'com.diffplug.eclipse.apt' version '3.22.0'
  id 'org.springframework.boot' version '2.2.4.RELEASE'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.openapi.generator' version '4.2.3'
  // id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'eclipse'
  id 'java'
}

apply plugin: 'eclipse'
apply plugin: 'java'

apply from: 'version.gradle'

def s84Group = 'io.service84.services'
def s84CoreName = s84JarName.split('-')[0]

// configure all java components to be published
publishing {
  publications {
    maven(MavenPublication) {
      from(components.java)
    }
  }
  repositories {
    maven {
      name = 'OSSRH'
      def releasesURL = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
      def snapshotsURL = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
      url = s84Version.endsWith('SNAPSHOT') ? snapshotsURL : releasesURL

      credentials {
        def ossUsername = project.hasProperty('ioService84OSSUsername') ? ioService84OSSUsername : 'Unknown user'
        def ossPassword = project.hasProperty('ioService84OSSPassword') ? ioService84OSSPassword : 'Unknown password'
        username = ossUsername
        password = ossPassword
      }
    }
  }
}

// ossrh requires javadoc and sources https://central.sonatype.org/pages/requirements.html
java {
  withJavadocJar()
  withSourcesJar()
}

jar {
  archiveBaseName = s84JarName
  archiveVersion = s84Version
  enabled = true

  from('.') {
    include  'LICENSE'
    include  'NOTICE'
  }
}

// ossrh requries signing https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/signing_plugin.html
// this only configures signing if the key is found
// For signing you need to make signingKey and signingPassword available properties See https://docs.gradle.org/current/userguide/build_environment.html#sec:project_properties
// The following makes the key available via the Gradle Property signingKey
// export ORG_GRADLE_PROJECT_signingKey=`cat test-private.pgp`
// export ORG_GRADLE_PROJECT_signingPassword='password'
// After making the Gradle properties above available, you can try signing using
// gradle signMavenPublication
//
// NOTE: If you are using the legacy publishing you need to sign using the info at https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signing_pom_files
def hasSigningKey = project.hasProperty('signing.keyId') || project.findProperty('signingKey')

if(hasSigningKey) {
  sign(project)
}

void sign(Project project) {
  project.signing {
    required { project.gradle.taskGraph.hasTask('publish') }
    def signingKeyId = project.findProperty('signingKeyId')
    def signingKey = project.findProperty('signingKey')
    def signingPassword = project.findProperty('signingPassword')

    if (signingKeyId) {
      useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    } else if (signingKey) {
      useInMemoryPgpKeys(signingKey, signingPassword)
    }

    sign publishing.publications.maven
  }
}

// customize the pom so it complies to Maven central requirements https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/maven_plugin.html#sec:maven_pom_generation
project.plugins.withType(MavenPublishPlugin).all {
  PublishingExtension publishing = project.extensions.getByType(PublishingExtension)

  publishing.publications.withType(MavenPublication).all { mavenPublication ->
    mavenPublication.pom {
      name = s84Name
      packaging = 'jar'
      description = s84Description
      groupId = s84Group
      artifactId = s84JarName
      version = s84Version
      url = s84GithubBase

      scm {
        connection = 'scm:git:' + s84GithubBase + '.git'
        developerConnection = 'scm:git:' + s84GithubBase + '.git'
        url = s84GithubBase
      }

      licenses {
        license {
          name = 'The Apache License, Version 2.0'
          url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
      }

      developers {
        developer {
          id = 'tyler'
          name = 'Tyler'
          email = 'Tyler@service84.io'
        }
      }
    }
  }
}

sourceCompatibility = 11.0

sourceSets {
  main {
    java {
      srcDir 'gen/main/java'
    }
  }
}

sourceSets {
  main {
    resources {
      srcDir 'gen/main/resources'
    }
  }
}

repositories {
  if (s84Version.endsWith('SNAPSHOT')) {
    mavenLocal()
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }

  jcenter()
  mavenCentral()
  maven { url 'https://plugins.gradle.org/m2/' }
}

configurations {
  javaClient
}

configurations.all {
  exclude module: 'slf4j-jdk14'
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'

  implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.3'
  implementation 'com.google.code.findbugs:jsr305:3.0.2'

  implementation 'com.auth0:java-jwt:3.10.3'
  implementation 'com.auth0:jwks-rsa:0.14.0'

  implementation 'io.springfox:springfox-swagger2:2.7.0'
  implementation 'javax.validation:validation-api:2.0.1.Final'
  implementation 'javax.xml.bind:jaxb-api:2.3.1'

  implementation 'org.apache.commons:commons-pool2:2.4.3'
  implementation 'org.apache.commons:commons-lang3:3.7'
  implementation 'org.apache.commons:commons-collections4:4.1'

  implementation 'net.logstash.logback:logstash-logback-encoder:4.11'

  implementation 'io.service84.library:exceptionalresult:1.3.50-SNAPSHOT'
  implementation 'io.service84.library:authutils:1.3.50-SNAPSHOT'
  implementation 'io.service84.library:keyvaluepersistence:1.3.50-SNAPSHOT'

  implementation 'io.service84.library:standardauth:1.3.50-SNAPSHOT'
  implementation 'io.service84.library:standardpersistence:1.3.50-SNAPSHOT'
  implementation 'io.service84.library:standardservice:1.3.50-SNAPSHOT'

  implementation 'org.hibernate:hibernate-envers:5.4.22.Final'
  runtimeOnly 'org.postgresql:postgresql'

  ////////////////////////////////
  //Test Dependencies/////////////
  ////////////////////////////////
  testImplementation 'org.springframework.boot:spring-boot-starter-test'

  ////////////////////////////////
  //JPA Specification/////////////
  //Metamodel Generator///////////
  ////////////////////////////////
  annotationProcessor 'org.hibernate:hibernate-jpamodelgen:5.4.14.Final'
}

test {
  useJUnitPlatform()
}

////////////////////////////////
//Download Dependencies/////////
////////////////////////////////
task downloadDependencies {
  doLast {
    project.rootProject.allprojects.each { project ->
      project.buildscript.configurations.each { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }

      project.configurations.each { configuration ->
        if (configuration.canBeResolved) {
          configuration.resolve()
        }
      }
    }
  }
}

////////////////////////////////
//Generate Metamodel////////////
////////////////////////////////
eclipse {
  synchronizationTasks eclipseFactorypath
  synchronizationTasks eclipseJdt
  synchronizationTasks eclipseJdtApt
}

////////////////////////////////
//Process Service Dependencies//
////////////////////////////////
task processService {
  configurations.javaClient.each {
    def serviceJAR = "${it}"
    def serviceName = org.apache.commons.io.FilenameUtils.getBaseName(serviceJAR).split('-')[0]

    tasks.create(name: "delete_api_definition_${serviceName}", type: Delete) {
      delete "gen/main/resources/${serviceName}.yaml"
    }

    tasks.create(
        name: "copy_api_definition_${serviceName}",
        dependsOn: [ "delete_api_definition_${serviceName}"],
        type: Copy
    ) {
      from(zipTree(serviceJAR).matching { include "${serviceName}.yaml" })
      into('gen/main/resources')
    }

    tasks.create(name: "delete_api_client_${serviceName}", type: Delete) {
      delete "gen/main/java/io/service84/clients/${serviceName}"
    }

    tasks.create(
        name: "generate_api_client_${serviceName}",
        dependsOn: [ "delete_api_client_${serviceName}", "copy_api_definition_${serviceName}"],
        type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask
    ) {
      inputSpec = "${rootDir}/gen/main/resources/${serviceName}.yaml"
      outputDir = "${rootDir}"
      generatorName = 'java'
      library = 'resttemplate'
      apiPackage = "io.service84.clients.${serviceName}.api"
      modelPackage = "io.service84.clients.${serviceName}.dto"
      modelNameSuffix = 'DTO'
      configOptions = [
        delegatePattern: 'True',
        useTags: 'True',
        hideGenerationTimestamp: 'True',
        dateLibrary: 'java8',
        sourceFolder: 'gen/main/java'
      ]
      typeMappings = [
        OffsetDateTime: 'java.time.LocalDateTime'
      ]
    }

    compileJava.dependsOn "generate_api_client_${serviceName}"

    eclipse {
      autoBuildTasks "generate_api_client_${serviceName}"
      synchronizationTasks "generate_api_client_${serviceName}"
    }
  }
}

////////////////////////////////
//API Stubs/////////////////////
////////////////////////////////
task deleteAPIStubs(type: Delete) {
  delete "gen/main/java/io/service84/services/${s84CoreName}"
}

task generateAPIStubs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
  inputSpec = "$rootDir/src/main/resources/${s84CoreName}.yaml"
  outputDir = "$rootDir"
  generatorName = 'spring'
  library = 'spring-boot'
  apiPackage = "io.service84.services.${s84CoreName}.api"
  modelPackage = "io.service84.services.${s84CoreName}.dto"
  modelNameSuffix = 'DTO'
  configOptions = [
    delegatePattern: 'True',
    useTags: 'True',
    hideGenerationTimestamp: 'True',
    dateLibrary: 'java8',
    sourceFolder: 'gen/main/java'
  ]
  typeMappings = [
    OffsetDateTime: 'java.time.LocalDateTime'
  ]
}

generateAPIStubs.dependsOn deleteAPIStubs

compileJava.dependsOn generateAPIStubs

eclipse {
  autoBuildTasks generateAPIStubs
  synchronizationTasks generateAPIStubs
}
